<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Restaurant Matcher</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        /* Previous CSS styles remain the same */
        .status-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            display: none;
        }

        .participant-count {
            position: fixed;
            top: 20px;
            left: 20px;
            background: #00C2E8;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Previous HTML structure remains the same -->
        <div id="statusMessage" class="status-message"></div>
        <div id="participantCount" class="participant-count">Participants: 1</div>
    </div>

    <script>
        let socket;
        let sessionId;
        let userId;
        let currentRestaurant;
        let restaurants = [];
        let dragStartX;
        let currentX;
        let initialX;

        // Initialize Socket.IO connection
        function initializeSocket() {
            socket = io('http://your-websocket-server.com');

            socket.on('connect', () => {
                showStatusMessage('Connected to server');
            });

            socket.on('disconnect', () => {
                showStatusMessage('Disconnected from server');
            });

            socket.on('session_created', handleSessionCreated);
            socket.on('session_joined', handleSessionJoined);
            socket.on('participant_joined', handleParticipantJoined);
            socket.on('match_found', handleMatchFound);
            socket.on('error', handleError);
        }

        // Show status message
        function showStatusMessage(message) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            setTimeout(() => {
                statusEl.style.display = 'none';
            }, 3000);
        }

        // Start new session
        async function startNewSession() {
            try {
                const position = await getCurrentPosition();
                
                socket.emit('create_session', {
                    location: {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude
                    }
                });
            } catch (error) {
                console.error('Error starting session:', error);
                showStatusMessage('Error starting session. Please try again.');
            }
        }

        // Handle session created
        function handleSessionCreated(data) {
            sessionId = data.session_id;
            userId = data.user_id;
            restaurants = data.restaurants;
            
            // Show share link
            const shareLink = `${window.location.origin}?session=${sessionId}`;
            document.getElementById('shareLink').textContent = `Share this link: ${shareLink}`;
            document.getElementById('shareLink').classList.remove('hidden');
            
            // Start showing restaurants
            showNextRestaurant();
            
            // Hide welcome screen, show swipe screen
            document.getElementById('welcomeScreen').classList.add('hidden');
            document.getElementById('swipeScreen').classList.remove('hidden');
            
            showStatusMessage('Session created successfully');
        }

        // Handle session joined
        function handleSessionJoined(data) {
            userId = data.user_id;
            restaurants = data.restaurants;
            updateParticipantCount(data.participant_count);
            
            // Start showing restaurants
            showNextRestaurant();
            
            // Hide welcome screen, show swipe screen
            document.getElementById('welcomeScreen').classList.add('hidden');
            document.getElementById('swipeScreen').classList.remove('hidden');
            
            showStatusMessage('Joined session successfully');
        }

        // Handle participant joined
        function handleParticipantJoined(data) {
            updateParticipantCount(data.participant_count);
            showStatusMessage('New participant joined');
        }

        // Update participant count
        function updateParticipantCount(count) {
            document.getElementById('participantCount').textContent = `Participants: ${count}`;
        }

        // Like current restaurant
        function likeCurrentRestaurant() {
            socket.emit('like_restaurant', {
                session_id: sessionId,
                user_id: userId,
                restaurant_id: currentRestaurant.id
            });
            
            showNextRestaurant();
        }

        // Handle match found
        function handleMatchFound(data) {
            document.getElementById('matchPopup').classList.add('active');
            document.getElementById('woltLink').href = `https://wolt.com/restaurant/${data.restaurant.id}`;
            showStatusMessage('Match found!');
        }

        // Handle errors
        function handleError(data) {
            showStatusMessage(data.message);
        }

        // Join existing session
        async function joinExistingSession(sessionId) {
            try {
                const position = await getCurrentPosition();
                
                socket.emit('join_session', {
                    session_id: sessionId,
                    location: {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude
                    }
                });
            } catch (error) {
                console.error('Error joining session:', error);
                showStatusMessage('Error joining session. Please try again.');
            }
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            initializeSocket();
            document.getElementById('startSession').addEventListener('click', startNewSession);
            
            // Handle touch events for swiping
            const card = document.getElementById('card');
            card.addEventListener('touchstart', handleTouchStart);
            card.addEventListener('touchmove', handleTouchMove);
            card.addEventListener('touchend', handleTouchEnd);
            
            // Check for session parameter in URL
            const urlParams = new URLSearchParams(window.location.search);
            const sessionParam = urlParams.get('session');
            
            if (sessionParam) {
                sessionId = sessionParam;
                joinExistingSession(sessionId);
            }
        });

        // Previous touch event handlers and utility functions remain the same
    </script>
</body>
</html>
